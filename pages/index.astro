---
import { getEntry } from 'astro:content';

type GetEntryParams = Parameters<typeof getEntry>;
type Collection = GetEntryParams[0];
type Id = GetEntryParams[1];

async function getContents(c: Collection, f: Id) {
	const file = await getEntry(c, f);
	// there's a type-shaped puzzle box here to remove the `!`;
	// right now, `getContents` accepts anything that might be a "raw file",
	// and/or a collection/id pair that might not even exist.
	//
	// There Exists A Way to restrict the type signature to only allow raw file
	// collections / existing IDs within those collections, but I don't know the
	// typescript meta-language well enough to identify an effective approach.
	return file!.data.contents;
}

// TODO: doesn't css do multiplication now? could we just say `x = width * (num prior siblings) + padding * (num prior siblings)`? should we?
// lol sorta: https://stackoverflow.com/a/66262844 (just gotta pre-generate the identity mapping from `nth-child(n) -> --var: n` for all n we care about)
const vis = {
	lanes: {
		width: 15,
		height: 15,
		padding: {
			x: 1,
			y: 1,
		},
	},
	// TODO why can't ts sniff this one out?
	cores: Array(4).fill({
		lanes: {
			count: 8,
		},
	}),
};

const splits = [/\n# ENTRY.*\n/];
const tcfContents = await getContents('talvos', 'vecadd.tcf');

const tcfChunks = tcfContents.split(splits[0]);

// nice to have

// TODO: monaco editor
// TODO: lsp integration w/ tree-sitter
---

<html>
	<head>
		<title>gpgpu playground</title>
		<script>
			// TODO
			/// <zreference types="emscripten" />
			import { Arena } from '../lib/binding/arena';
			import { Ptr } from '../lib/binding/ptr';
			import { BitSet } from '../lib/bitset';
			import { States, ExecutionUniverse } from '../lib/executionUniverse';
			import { Talvos$$Module, Talvos$$Params } from '../lib/talvos';
			import talvos from '../wasm/talvos-wasm';

			const rootEl = document.getElementById('talvos')!;

			const stdioEl =
				rootEl.querySelector<HTMLOutputElement>('output.stdio') || ({} as { value: HTMLOutputElement['value'] });
			const errorEl =
				rootEl.querySelector<HTMLOutputElement>('output.error') || ({} as { value: HTMLOutputElement['value'] });

			var Module = {
				print: function (text: any) {
					stdioEl.value += text + '\n';
				},
				printErr: function (text: any) {
					stdioEl.value += text + '\n';
				},
			} as any; /* TODO: emscripten types */

			window.addEventListener('error', (event) => {
				errorEl.value = '' + event.message;
			});
			window.addEventListener('unhandledrejection', function (event) {
				errorEl.value = '' + event.reason;
			});

			const svgEl = document.querySelector<SVGElement>('#talvos svg')!;
			// this part is................. well, it's a prototype
			const [doUpdateVis, clearVis] = (() => {
				// via https://matyasfodor.com/blog/efficient-zip#how-javascript-could-do-it
				// and https://stackoverflow.com/a/70192772/151464
				function* zip<T extends Iterable<unknown>[]>(
					...args: T
				): Generator<{ [K in keyof T]: T[K] extends Iterable<infer V> ? V : never }> {
					const iterators = args.map((iterable) => iterable[Symbol.iterator]());
					// TODO[seth]: this feels a little over-allocate-y? do we need a whole array just for the states?
					// TODO[seth]: maybe some benchmarks?
					let iterStates = iterators.map((iterator) => iterator.next());
					while (iterStates.every(({ done }) => !done)) {
						// @ts-expect-error
						yield iterStates.map(({ value }) => value);
						iterStates = iterators.map((iterator) => iterator.next());
					}
				}

				const clearVis = () => {
					svgEl.querySelectorAll<SVGElement>('.lane').forEach((el) => {
						el.classList.remove('disabled', 'selected');
						el.dataset.state = 'inactive';
						delete el.dataset.logCoords;
					});
				};

				const layerViolationStopEl = document.querySelector<HTMLButtonElement>('#talvos button.stop')!;
				layerViolationStopEl.addEventListener('click', clearVis);
				const layerViolationContEl = document.querySelector<HTMLButtonElement>('#talvos button.continue')!;
				layerViolationContEl.addEventListener('click', () => setTimeout(clearVis, 0)); // lol
				const layerViolationRunEl = document.querySelector<HTMLButtonElement>('#talvos button.run')!;
				layerViolationRunEl.addEventListener('click', clearVis);

				function toDOMString(s: States) {
					switch (s) {
						case States.Active:
							return 'active';
						case States.Inactive:
							return 'inactive';
						case States.AtBarrier:
							return 'at-barrier';
						case States.AtBreakpoint:
							return 'at-breakpoint';
						case States.AtAssert:
							return 'at-assert';
						case States.AtException:
							return 'at-exception';
						case States.NotLaunched:
							return 'not-launched';
						case States.Exited:
							return 'exited';
						case States.UNKNOWN:
							return 'unkown';
					}
				}

				return [
					(e: ExecutionUniverse) => {
						// last 2 `g`s (there is something weird here...)
						// svgEl.querySelectorAll('g:nth-last-child(-n+3) > rect').forEach((el) => el.classList.add('disabled'));

						console.assert('' + e.Cores == svgEl.dataset.cores);
						console.assert('' + e.Lanes == svgEl.dataset.lanes);

						for (const [idx, el, data] of zip(
							(function* () {
								let i = 0;
								while (true) {
									yield i++;
								}
							})(),
							svgEl.querySelectorAll<SVGElement>('g > .lane'),
							e.LaneStates
						)) {
							console.assert(`{ ${data.PhyCoord.Core}, ${data.PhyCoord.Lane} }` == el.dataset.phyCoords);

							el.dataset.state = toDOMString(data.State);
							el.dataset.logCoords = `{ 0, (${data.LogCoord.X},${data.LogCoord.Y},${data.LogCoord.Z}) }`;
							el.classList.toggle('selected', e.SteppedLanes.has(idx));
						}
					},
					clearVis,
				];
			})();

			const [validate_wasm, exception, assertion, { /*run, debug,*/ Session }] = (function (p: Promise<any>) {
				return [
					p.then((instance) => instance.cwrap('validate_wasm', 'boolean', ['string'])),
					p.then((instance) => instance.cwrap('exception', null, [])),
					p.then((instance) => instance.cwrap('assertion', null, [])),
					(() => {
						var pp = p.then(
							({
								wasmExports: {
									Session__create__,
									Session__destroy__,
									Session__params_ref,
									Session__module_ref,

									Session_run,
									Session_start,
									Session_step,
									Session_switch,
									Session_print,
									Session_continue,
									Session_printContext,

									Session_fetch_shrubbery,
								},

								stackAlloc,
								stackSave,
								stackRestore,
								stringToUTF8OnStack,
								// stringToUTF8Array,
								// UTF8ArrayToString,
								// writeArrayToMemory, // this is only HEAP8?
								HEAP32,
								// HEAP8,

								wasmMemory,
								_malloc,
								_free,

								// ...instance
							}) => {
								type dtor = () => void;
								function heapAlloc(size: number): [Ptr, dtor] {
									const addr = _malloc(size);
									const buf = wasmMemory.buffer;
									const ptr = new Ptr(buf, addr, size);
									return [ptr, () => _free(ptr) as void];
								}

								function toCArgs(args: string[]) {
									const cstrs = args.map(stringToUTF8OnStack) as number[];
									const argv = stackAlloc(cstrs.length);
									// writeArrayToMemory(cstrs, argv);
									// HEAP32.set(cstrs, argv);
									cstrs.forEach((s, i) => {
										HEAP32[(argv + i * 4) >> 2] = s;
									});

									return [cstrs.length, argv];
								}

								const arenaSize = 1 << 12; // TODO
								class Session {
									ptr: unknown;

									// TODO ahh but I turned off typescript's help with these this way...
									// these are initialized in Session.bind, which the constructor calls
									// cf. https://stackoverflow.com/a/72540067
									arena!: Arena;
									lastOp!: ExecutionUniverse;
									laneMask!: BitSet;
									params!: Talvos$$Params;
									module!: Talvos$$Module;

									static bind(ptr: unknown) {
										try {
											var self = Object.create(this.prototype);
											self.ptr = ptr;
											self.arena = new Arena(...heapAlloc(arenaSize));
											self.lastOp = new ExecutionUniverse(self.arena.alloc(ExecutionUniverse.SIZE));
											self.laneMask = new BitSet(undefined, { data: self.arena.alloc(8).data });
											self.params = new Talvos$$Params(
												new Ptr(wasmMemory.buffer, Session__params_ref(ptr), Talvos$$Params.SIZE)
											);
											self.module = new Talvos$$Module(
												new Ptr(wasmMemory.buffer, Session__module_ref(ptr), Talvos$$Module.SIZE)
											);
										} catch (ex) {
											Session__destroy__(ptr);
											if (self?.arena) destroy(self.arena);
											throw ex;
										}
										return self;
									}

									constructor(module: string, commands: string) {
										// TODO why this dance? what does stack save/stack restore do?
										const stack = stackSave();
										const [arg0, arg1] = [module, commands].map(stringToUTF8OnStack) as number[];
										const ref = Session__create__(arg0, arg1);
										// TODO wrap the restore in a finally ?
										stackRestore(stack);
										return Session.bind(ref);
									}

									run() {
										Session_run(this.ptr);
									}
									start() {
										Session_start(this.ptr, this.lastOp.ptr.asRef());
										doUpdateVis(this.lastOp);
									}
									step(): number {
										this.laneMask.clear();
										svgEl.querySelectorAll('.lane').forEach((el, i) => {
											// TODO this assumes a linear indexing of lanes, but we've got per-core indexing in talvos
											if (el.classList.contains('selected')) this.laneMask.add(i);
										});
										var ret = Session_step(this.ptr, this.laneMask.asRef(), this.lastOp.asRef());
										doUpdateVis(this.lastOp);
										if (ret > 0) {
											clearVis();
										}
										return ret;
									}
									switch(args: string[]) {
										// TODO why this dance? what does stack save/stack restore do?
										const stack = stackSave();
										Session_switch(this.ptr, ...toCArgs(['switch', ...args]));
										// TODO wrap the restore in a finally ?
										stackRestore(stack);
									}
									print(args: string[]) {
										// TODO why this dance? what does stack save/stack restore do?
										const stack = stackSave();
										Session_print(this.ptr, ...toCArgs(['print', ...args]));
										// TODO wrap the restore in a finally ?
										stackRestore(stack);
									}
									continue() {
										Session_continue(this.ptr, this.lastOp.ptr.asRef());
										doUpdateVis(this.lastOp);
									}
									printContext() {
										Session_printContext(this.ptr);
									}

									fetchShrubbery() {
										var ret = this.arena.alloc(8);
										Session_fetch_shrubbery(this.ptr, ret.asRef());
										return new BitSet(undefined, { data: ret.data });
									}

									['__destroy__']() {
										// TODO use a finalizer pool?
										console.log('Session.destroy...');
										Session__destroy__(this.ptr);
										this.ptr = 0;
										destroy(this.arena);
									}
								}

								return {
									Session,
									// run: function () {
									// 	return Session.bind(instance.ccall('run_wasm', undefined, ['string', 'string'], arguments));
									// },
									// debug: function () {
									// 	return Session.bind(instance.ccall('debug_wasm', undefined, ['string', 'string'], arguments));
									// },
								};
							}
						);

						return {
							Session: pp.then((val) => val.Session),
							// run: pp.then((val) => val.run),
							// debug: pp.then((val) => val.debug),
						};
					})(),
				];
			})(talvos(Module));
			// TODO?
			// type Session = Awaited<typeof Session>;
			type Session = any;

			// TODO this probably belongs in some prejs thing over in talvos-land
			// @ts-ignore
			function destroy(self) {
				self['__destroy__']();
			}

			// TODO refactor into `withTiming` / `withExec` ?
			function captureOutput(f: Function, qstart?: PerformanceMeasure) {
				stdioEl.value = '';
				errorEl.value = '';
				rootEl.querySelector<HTMLOutputElement>('output.timing')!.value = `...`;
				rootEl.querySelectorAll<HTMLButtonElement>('button.exec').forEach((el) => (el.disabled = true));
				// TODO why does `start = start ?? ...` not narrow the type here?
				let start = qstart ?? window.performance.mark('talvos');
				return (async () => f())()
					.catch((ex) => {
						var message;
						// TODO `Property 'Exception' does not exist on type 'typeof WebAssembly'.`
						// @ts-ignore
						if (ex instanceof WebAssembly.Exception) {
							var type;
							[type, message] = Module.getExceptionMessage(ex);
							message = message || `of type ${type}`;

							console.error(
								/* must be the only argument to symbolicate properly */
								ex.stack
								/* cf. https://crbug.com/1428532 */
							);
							Module.decrementExceptionRefcount(ex);
						} else {
							console.error(`in ${start.name}:`, ex);
							message = '' + ex;
						}
						errorEl.value = message;
					})
					.finally(() => {
						const call = window.performance.measure(start.name, start.name);
						rootEl.querySelector<HTMLOutputElement>('output.timing')!.value = `done in ${call.duration}ms`;
						rootEl.querySelectorAll<HTMLButtonElement>('button.exec').forEach((el) => el.removeAttribute('disabled'));
						// console.log(`done! took ${call.duration}ms`);
						// console.log('output:\n', outBuf);
					});
			}

			rootEl.querySelector<HTMLButtonElement>('button.validate')!.onclick = async function () {
				const text = (rootEl.querySelector('.module') as { value: string } | null)!.value;

				const start = window.performance.mark('validate_wasm', { detail: { text } });
				const ok = await captureOutput(async () => (await validate_wasm)(text), start);
				rootEl.querySelector<HTMLOutputElement>('output.stdio')!.value += ok ? 'ok!' : 'not ok :(';
			};

			rootEl.querySelector<HTMLButtonElement>('button.assertion')!.onclick = async () => captureOutput(await assertion);
			rootEl.querySelector<HTMLButtonElement>('button.exception')!.onclick = async () => captureOutput(await exception);
			rootEl.querySelector<HTMLButtonElement>('button.shrubbery')!.onclick = async () => {
				const s = (await Session).bind(0xc0ffeecafe);
				try {
					const bs = s.fetchShrubbery();
					console.log(bs);
				} finally {
					destroy(s.arena);
				}
			};

			rootEl.querySelector<HTMLButtonElement>('button.run')!.onclick = async function () {
				const text = (rootEl.querySelector('.module') as { value: string } | null)!.value;
				const commands = (rootEl.querySelector('.commands') as { value: string } | null)!.value;

				const start = window.performance.mark('run_wasm', { detail: { text, commands } });
				captureOutput(async () => {
					const session = new (await Session)(text, commands);
					const entryEl = rootEl.querySelector<HTMLSelectElement>('select[name="entry"]')!;
					session.params.EntryName = entryEl.selectedOptions.item(0)!.value;
					try {
						session.run();
					} finally {
						destroy(session);
					}
					// TODO something goes very wrong when `BUFFER output 2 INT32 FILL 0` (memory access exception reporting failure) and then we try to `run` again
					//   ^ bjorks the whole tab
					// TODO (generally, handling "invalid memory access" better?)
					// 		loosely; I think this means throwing away the whole talvos instance and re-creating it?
				}, start);
			};

			rootEl.querySelector<HTMLButtonElement>('button.debug')!.onclick = async function () {
				stdioEl.value = '';
				errorEl.value = '';
				rootEl.querySelector<HTMLOutputElement>('output.timing')!.value = `...`;
				rootEl.querySelectorAll<HTMLButtonElement>('button.exec').forEach((el) => (el.disabled = true));
				const text = (rootEl.querySelector('.module') as { value: string } | null)!.value;
				const commands = (rootEl.querySelector('.commands') as { value: string } | null)!.value;

				const start = window.performance.mark('debug', { detail: { text, commands } });
				const session = new (await Session)(text, commands);
				session.params.EntryName = 'vecadd';

				const debugCtrl = rootEl.querySelector<HTMLElement>('.debugger')!;

				function finish() {
					debugCtrl.hidden = true;
					// remove references to 1) allow the session to be GC'd, and 2) safety of the dangling pointer
					debugCtrl.querySelectorAll<HTMLButtonElement>('button').forEach((el) => (el.onclick = null));
					rootEl.querySelectorAll<HTMLButtonElement>('button.exec').forEach((el) => el.removeAttribute('disabled'));

					destroy(session);

					const call = window.performance.measure(start.name, start.name);
					rootEl.querySelector<HTMLOutputElement>('output.timing')!.value = `done in ${call.duration}ms`;
				}

				try {
					session.start();

					session.printContext();
				} catch (e) {
					finish();
					throw e;
				}

				const FINISHED = 1; // TODO sync with talvos::PipelineExecutor::StepResult

				debugCtrl.querySelector<HTMLButtonElement>('button.step')!.onclick = function () {
					stdioEl.value = '';
					errorEl.value = '';
					try {
						const last = session.step();
						if (last == FINISHED) {
							finish();
						}

						session.printContext();
					} catch (e) {
						finish();
						throw e;
					}
				};
				debugCtrl.querySelector<HTMLButtonElement>('button.switch')!.onclick = function () {
					const input = prompt('Usage: switch: X [Y [Z]]', 'X [Y [Z]]'); // %15 is `void` in vecadd
					if (input == null) {
						return;
					}
					const args = input.split(/\s+/);
					session.switch(args);
				};
				debugCtrl.querySelector<HTMLButtonElement>('button.print')!.onclick = function () {
					const input = prompt('Usage: print: %<id>', '%15'); // %15 is `void` in vecadd
					if (input == null) {
						return;
					}
					const args = input.split(/\s+/);
					session.print(args);
				};

				debugCtrl.querySelector<HTMLButtonElement>('button.stop')!.onclick = finish;
				debugCtrl.querySelector<HTMLButtonElement>('button.continue')!.onclick = function () {
					stdioEl.value = '';
					errorEl.value = '';
					try {
						session.continue();
					} finally {
						// TODO breakpoints
						finish();
					}
				};

				debugCtrl.hidden = false;
			};

			const entryEl = rootEl.querySelector<HTMLSelectElement>('select[name="entry"]')!;
			setTimeout(async function updateEntrypoints() {
				// lol redirect
				const oldOut = stdioEl.value,
					oldErr = errorEl.value;
				stdioEl.value = '';
				errorEl.value = '';

				const text = (rootEl.querySelector('.module') as { value: string } | null)!.value;

				const s = new (await Session)(text, '');
				try {
					console.log([...s.module.EntryPoints].map((ep) => ep.Name.asString()));
					entryEl.innerHTML = [...s.module.EntryPoints].map((ep) => `<option>${ep.Name.asString()}</option>`).join('');
				} finally {
					destroy(s);
				}

				if (stdioEl.value) {
					console.log(stdioEl.value);
				}
				stdioEl.value = oldOut;
				if (errorEl.value) {
					console.error(errorEl.value);
				}
				errorEl.value = oldErr;
				// TODO polling? or onchange notifications?
				// setTimeout(updateEntrypoints, 2000);
			}, 0);
		</script>
		<link rel="stylesheet" type="text/css" media="all" href="/learn-gpgpu/styles/index.css" />
	</head>
	<body>
		<div id="talvos">
			<div>
				<main>
					<textarea
						class="module"
						autocorrect="off"
						autocomplete="off"
						autocapitalize="off"
						spellcheck="false"
						aria-label="SPIR-V module assembly (spv_text format)"
						wrap="off">{await getContents('talvos', 'vecadd.spvasm')}</textarea
					>
				</main>
				<aside>
					<section>
						<textarea
							class="commands_todo_make_js_concatenate_all_the_commands inactive"
							autocorrect="off"
							autocomplete="off"
							autocapitalize="off"
							spellcheck="false"
							aria-label="Talvos commands (informational)"
							disabled
							wrap="off">{tcfChunks[0]}</textarea
						>
					</section>
					<section>
						<label
							>ENTRY
							<select name="entry"></select>
						</label>
					</section>
					<section>
						<textarea
							class="commands"
							style="height: 434px"
							autocorrect="off"
							autocomplete="off"
							autocapitalize="off"
							spellcheck="false"
							aria-label="Talvos commands (tcf format)"
							wrap="off">{tcfChunks[1]}</textarea
						>
					</section>
				</aside>
			</div>

			<div id="controls">
				<button class="validate exec">validate</button>
				<button class="run exec">run</button>
				<button class="debug exec">debug</button>

				<div hidden>
					<button class="exception">exception</button>
					<button class="assertion">assertion</button>
					<button class="shrubbery">shrubbery</button>
				</div>

				<div class="debugger" hidden>
					<!-- cf. PipelineExecutor::help -->
					<button class="step">step</button>
					<button class="switch">switch</button>
					<button class="print">print</button>
					<button class="continue">continue</button>
					<button class="stop">stop</button>
					<!-- missing: [break, breakpoint, help, quit] -->
				</div>
			</div>

			<!-- TODO
				 can we pull out just this one wodget into a "component"?
				 it'd be nice to write some code for turning `102043253.21231222ms` into a human time
			-->
			<output class="timing" style="display: block;"></output>

			<svg xmlns="http://www.w3.org/2000/svg" data-cores={vis.cores.length} data-lanes={vis.cores[0].lanes.count}>
				<style>
					g.core :hover,
					g.core :focus {
						filter: drop-shadow(0 0 3px rgb(0 0 0 / 0.4));
					}

					g.core .ctrl {
						fill: chocolate;
					}

					.lane.selected,
					.ctrl:has(~ .lane.selected):not(:has(~ .lane:not(.selected))) {
						filter: url(#inset-shadow);
					}

					.ctrl:has(~ .lane[data-state='not-launched']):not(:has(~ .lane[data-state='not-launched'])) {
						filter: opacity(60%);
					}

					/* .disabled {
						filter: opacity(60%);
					} */

					/*
						TODO these colors are from NVIDIA nsight; but they're also bad?

						cf. "CUDA Debugger Warp Info View" from https://developer.nvidia.com/nsight-visual-studio-edition
						(https://d29g4g2dyqv443.cloudfront.net/sites/default/files/akamai/tools/nsvse/nsvse2020_1/NsVSE_Dbg_WarpInfo_Vw.png)
					*/
					/* TODO: wait, what's `not-launched` vs `inactive`? */
					.lane[data-state='active'] {
						fill: forestgreen;
					}
					.lane[data-state='inactive'] {
						fill: grey;
					}

					.lane[data-state='at-barrier'] {
						fill: lightseagreen;
					}
					.lane[data-state='at-breakpoint'] {
						fill: red;
					}
					.lane[data-state='at-assert'] {
						fill: orange;
					}
					.lane[data-state='at-exception'] {
						fill: darkred;
					}
					.lane[data-state='not-launched'] {
						fill: darkgray;
					}
					.lane[data-state='exited'] {
						fill: lightgray;
					}

					/* svg text {
						visibility: hidden;
					}
					svg:hover text {
						visibility: visible;
					} */

					/*
						NB: doesn't work for two reasons: css-for-svg doesn't support the `content` property or the `::before` pseudo-element

						cf. https://svgwg.org/svg2-draft/styling.html#RequiredProperties
						and https://svgwg.org/svg2-draft/styling.html#RequiredCSSFeatures
					*/
					/* tspan.physical::before {
						content: 'hello';
					} */

					/* lol there's also CSS-only way to do the hover text, if we don't mind the nth-child(n) -> --var:n mapping thing above */
					/* we'd have to break out using `foreignObject`, though */
				</style>

				<!-- <script></script> -->
				<!-- <defs>
					<pattern id="tenthGrid" width="10" height="10" patternUnits="userSpaceOnUse">
						<path d="M 10 0 L 0 0 0 10" fill="none" stroke="silver" stroke-width="0.5"></path>
					</pattern>
					<pattern id="grid" width="100" height="100" patternUnits="userSpaceOnUse">
						<rect width="100" height="100" fill="url(#tenthGrid)"></rect>
						<path d="M 100 0 L 0 0 0 100" fill="none" stroke="gray" stroke-width="1"></path>
					</pattern>
				</defs>
				<rect width="100%" height="100%" fill="url(#grid)"></rect> -->

				<defs>
					<filter id="inset-shadow">
						<!-- lol hates it -->
						<!-- <link
							href="https://css-tricks.com/adding-shadows-to-svg-icons-with-css-and-svg-filters/#aa-using-svg-filters"
							rel="help"
						/> -->
						<!-- Shadow offset -->
						<feOffset dx="0" dy="0"></feOffset>

						<!-- Shadow blur -->
						<feGaussianBlur stdDeviation="6" result="offset-blur"></feGaussianBlur>

						<!-- Invert drop shadow to make an inset shadow -->
						<feComposite operator="out" in="SourceGraphic" in2="offset-blur" result="inverse"></feComposite>

						<!-- Cut color inside shadow -->
						<feFlood flood-color="black" flood-opacity=".95" result="color"></feFlood>
						<feComposite operator="in" in="color" in2="inverse" result="shadow"></feComposite>

						<!-- Placing shadow over element -->
						<feComposite operator="over" in="shadow" in2="SourceGraphic"></feComposite>
					</filter>
				</defs>

				${
					vis.cores.map((core, i) => (
						<g class="core" transform={`translate(0, ${vis.lanes.height * i + vis.lanes.padding.y * i})`}>
							<rect class="ctrl" x={vis.lanes.width / 4} width={vis.lanes.width * 1.5} height={vis.lanes.height} />
							{Array.from({ length: core.lanes.count }).map((_, j) => (
								<rect
									x={(j + 2) * (vis.lanes.width + vis.lanes.padding.x)}
									width={vis.lanes.width}
									height={vis.lanes.height}
									data-phy-coords={`{ ${i}, ${j} }`}
									class="lane"
									data-state="inactive"
								/>
							))}
						</g>
					))
				}

				<!-- could put this above, if we knew how tall an em was (or translated negatively?) -->
				<text y={vis.cores.length * (vis.lanes.height + vis.lanes.padding.y) + vis.lanes.padding.y}>
					<tspan x="0" dy="1em">physical {`{core, SIMT lane}`}:</tspan>
					<tspan class="physical">N/A</tspan>
					<tspan x="0" dy="1.2em">logical {`{workgroup, invocation}`}:</tspan>
					<tspan class="logical">N/A</tspan>
				</text>
			</svg>

			<output class="error" style="display: block; background-color: #fcebeb;"></output>
			<output class="stdio" style="display: block; background-color: lightgray; white-space: pre;"></output>
		</div>
	</body>
	<script>
		const svgEl = document.querySelector<SVGElement>('#talvos svg')!;

		const phyEl = svgEl.querySelector<SVGTSpanElement>('tspan.physical')!;
		const logEl = svgEl.querySelector<SVGTSpanElement>('tspan.logical')!;

		const laneEls = svgEl.querySelectorAll<SVGElement>('.lane');
		for (const el of laneEls) {
			el.addEventListener('mouseenter', function () {
				phyEl.textContent = this.dataset.phyCoords!;
				logEl.textContent = this.dataset.logCoords ?? 'N/A';
			});
			el.addEventListener('mouseleave', function () {
				phyEl.textContent = 'N/A';
				logEl.textContent = 'N/A';
			});

			el.addEventListener('click', function () {
				if (this.classList.contains('.disabled')) return;

				this.classList.toggle('selected');
			});
		}

		const ctrlEls = svgEl.querySelectorAll<SVGElement>('.ctrl');
		for (const [i, el] of ctrlEls.entries()) {
			el.addEventListener('mouseenter', function () {
				// TODO don't assume lane width
				phyEl.textContent = `{ ${i}, [${i * 8}-${i * 8 + 7}] }`;
			});
			el.addEventListener('mouseleave', function () {
				phyEl.textContent = 'N/A';
			});

			el.addEventListener('click', function () {
				// TODO tease apart "the scheduler decided" vs "the human decided"
				const selectable = !!this.parentNode!.querySelector('.lane[data-state="active"], .lane[data-state="inactive"]');
				if (!selectable) return;

				const hasNoneSelected = !this.parentNode!.querySelector('.lane.selected');
				this.parentNode!.querySelectorAll<SVGElement>('.lane').forEach((laneEl) => {
					laneEl.classList.toggle('selected', hasNoneSelected);
				});
			});
		}
	</script>
</html>
